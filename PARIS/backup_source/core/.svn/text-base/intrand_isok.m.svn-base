% *******************************************************************************************************
% Position Aware RFID Systems: The PARIS Simulation Framework
% ***********************************************************
% check functionality of integer random number generator (check output distribution)
%
%
%
% ***** Copyright / License / Authors *****
% Copyright 2007, 2008, 2009, 2010, 2011 Daniel Arnitz
%   Signal Processing and Speech Communication Laboratory, Graz University of Technology, Austria
%   NXP Semiconductors Austria GmbH Styria, Gratkorn, Austria
% Copyright 2012 Daniel Arnitz
%   Reynolds Lab, Department of Electrical and Computer Engineering, Duke University, USA
%
% This file is part of the PARIS Simulation Framework.
%
% The PARIS Simulation Framework is free software: you can redistribute it and/or modify it under the
% terms of the GNU General Public License as published by the Free Software Foundation, either
% version 3 of the License, or (at your option) any later version.
%
% The PARIS Simulation Framework is distributed in the hope that it will be useful, but WITHOUT ANY
% WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
% See the GNU General Public License for more details.
%
% You should have received a copy of the GNU General Public License along with the PARIS Simulation 
% Framework. If not, see <http://www.gnu.org/licenses/>.
%
%
% ***** Behavior *****
% test_intrand()
%    Returns trrue if the distribution of the random vectors generated by INTRAND meets the expectations,
%    false if not. Note that this is a quick check with a certain probability for false positive and 
%    false negative alarms.
%
%
% ***** Changelog *****
% REVISION   DATE         USER        DESCRIPTION (! bugfixes, + addons, - removals, ~ otherwise)
% beta 1.0   2010-03-30   arnitz      ~ initial release
% beta 2.0   2010-09-01   arnitz      ~ testing release (unstable)
% beta 3.0   2012-05-07   arnitz      ~ partial bugfix release
%
%
% ***** Todo *****
%
% *******************************************************************************************************


function ok = intrand_isok


% *******************************************************************************************************
% internal settings (test settings)

internalsettings.n   =     3; % number of tests
internalsettings.len =   1e7; % overall length of array (number of entries)
internalsettings.dim =     5; % maximum number of dimensions for output (approximately uniform)
internalsettings.tol =  0.01; % tolerance for distribution (relative error)
internalsettings.bds =     5; % maximum +/-bounds (keep small)


% *******************************************************************************************************
% perform tests

for i = 1 : internalsettings.n
   % generate size vector
   n   = 1 + round(rand*(internalsettings.dim-1));
   dim = ceil(internalsettings.len^(1/n) * rand(1,n-1));
   dim = [dim, round(internalsettings.len/prod(dim)), 1];
   % generate bounds
   bds = sort(round( (rand(2,1)*2-1) * internalsettings.bds ));
   % get test vector
   x = intrand(dim, bds);
   % generate histogram
   hx = histc(x(:), bds(1):1:bds(2));
   % relative error to expected distribution
   relerr = ( hx - prod(dim)/(diff(bds)+1) ) / (prod(dim)/(diff(bds)+1));
   % checks; don't waste time in case of an error
   %    disp([i, (sum(hx)~=prod(dim)), (max(relerr))]);
   if (sum(hx)~=prod(dim)) || (any(relerr>internalsettings.tol))
      ok = false;
      return;
   end
end

% no error
ok = true;

